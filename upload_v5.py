#! python3

import click
from os import path

import json
from datetime import datetime
from dateutil import tz
import time

from afros_uploader.vex_serial.v5_device import *
from afros_uploader.vex_serial.direct_port import *
from afros_uploader.util import *

@click.command()
@click.argument('config_file')
def upload_v5(config_file):
	"""Uploads the project defined by CONFIG_FILE to a connected V5 Brain."""
	if not path.exists(config_file):
		click.echo("ERROR: " + config_file + " does not exist.")
		return

	click.echo("Reading " + config_file + "...")

	file_reader = open(config_file, 'r')
	json_data = json.load(file_reader)

	ini_result = generate_ini(json_data)

	if ini_result == None:
		click.echo('Errors encountered during ini generation, aborting upload.')

	click.echo('Getting file references...')

	if not 'artifact-path' in json_data.keys():
		click.echo("ERROR: The JSON tag \'artifact-path\' must be included in every project definition.")
		return

	if not path.exists(ini_result + '.ini'):
		click.echo("ERROR: " + ini_result + '.ini' + " does not exist. \
			This should not happen and is likely a bug in this program.")
		return

	ini_file = open(ini_result + '.ini', 'rb')

	build_path = path.dirname(path.realpath(config_file)) + '/' + json_data['artifact-path']
	build_file = open(build_path, 'rb')
	
	ports = find_v5_ports('system')

	if(len(ports) == 0):
		click.echo("ERROR: No V5 communication ports connected.")
		ini_file.close()
		build_file.close()
		return

	ser_name = ports[0].device

	click.echo('Sending files on port ' + ser_name + '.')

	ser = DirectPort(ser_name)
	v5 = V5Device(ser)

	v5.write_file(ini_file, ini_result + '.ini')
	v5.write_file(build_file, ini_result + '.bin')

	ini_file.close()
	build_file.close()

def generate_ini(json_data: dict):

	if not 'title' in json_data.keys():
		click.echo('ERROR: The JSON tag \'title\' must be included in every project definition.')
		return None

	title = json_data['title']

	if not 'slot' in json_data.keys():
		click.echo('ERROR: The JSON tag \'slot\' must be included in every project definition.')
		return None

	if not isinstance(json_data['slot'], int):
		click.echo('ERROR: The JSON tag \'slot\' must contain an integer between 1 and 8.')
		return None

	if json_data['slot'] < 1 or json_data['slot'] > 8:
		click.echo('ERROR: The JSON tag \'slot\' must contain an integer between 1 and 8.')
		return None

	slot = json_data['slot']

	description = 'Give this project a nice description!'
	if 'description' in json_data.keys():
		description = json_data['description']

	icon = 'USER921x.bmp'
	if 'icon' in json_data.keys():
		icon = json_data['icon']

	version = '1.0'
	if 'version' in json_data.keys():
		version = json_data['version']

	ide = 'AFROS'
	if 'ide' in json_data.keys():
		ide = json_data['ide']

	timestamp = time.time()
	time_str = datetime.fromtimestamp(timestamp).strftime('%Y-%m-%dT%H:%M:%S.%fZ')
	
	localtz = tz.tzlocal()
	tzoffset = localtz.utcoffset(datetime.now(localtz)).total_seconds() / 3600
	tzoffset = -5.0
	if(tzoffset >= 0):
		tzoffset_str = '{0:02.0f}:{1:02.0f}'.format(*divmod(tzoffset * 60, 60))
	else:
		tzoffset_str = '{0:03.0f}:{1:02.0f}'.format(*divmod(tzoffset * 60, 60))

	ini_filename = 'slot_' + str(slot)

	click.echo('Generating ' + ini_filename + '.ini...')

	ini_file = open(ini_filename + '.ini', 'w')

	ini_file.write(';\n')
	ini_file.write('; V5 program ini file\n')
	ini_file.write('; Autogenerated by AFROS V5 uploader\n')
	ini_file.write(';\n')
	ini_file.write('[project]\n')
	ini_file.write('version      = \"%s\"\n' % version)
	ini_file.write('ide          = \"%s\"\n' % ide)
	ini_file.write('file         = none\n')
	ini_file.write(';\n')
	ini_file.write('[program]\n')
	ini_file.write('version      = \"%s\"\n' % version)
	ini_file.write('name         = \"%s\"\n' % title)
	ini_file.write('slot         = \"%d\"\n' % (slot-1))
	ini_file.write('icon         = \"%s\"\n' % icon)
	ini_file.write('description  = \"%s\"\n' % description)
	ini_file.write('date         = \"%s\"\n' % time_str)
	ini_file.write('timezone     = \"%s\"\n' % tzoffset_str)
	ini_file.write(';\n')
	ini_file.close()

	return ini_filename


if __name__ == "__main__":
    upload_v5()